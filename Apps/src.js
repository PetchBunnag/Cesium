var viewer, camera, scene, globe, highlightedEntity, highlightColor = Cesium.Color.YELLOW, normalColor = Cesium.Color.LIGHTGREY.withAlpha(1); function flyToCameraPosition(b, a) { var c = Cesium.when.defer(); b.scene.camera.flyTo({ destination: Cesium.Cartesian3.fromDegrees(a.lng, a.lat, a.h), orientation: { heading: Cesium.Math.toRadians(a.heading), pitch: Cesium.Math.toRadians(a.pitch), roll: Cesium.Math.toRadians(a.roll) }, complete: function () { c.resolve("fly to the desired camera position") } }); return c }
function selectCallback(b) { var a = new Cesium.CallbackProperty(function (c, a) { return highlightedEntity === b ? Cesium.Color.clone(highlightColor, a) : Cesium.Color.clone(normalColor, a) }, !1); return new Cesium.ColorMaterialProperty(a) }
function add_glb_model(b) { var a = Cesium.Cartesian3.fromDegrees(b.xyz[0], b.xyz[1], b.xyz[2]), c = Cesium.Math.toRadians(b.rotate); c = new Cesium.HeadingPitchRoll(c, 0, 0); c = Cesium.Transforms.headingPitchRollQuaternion(a, c); return viewer.entities.add({ name: b.name, description: b.description, position: a, orientation: c, model: { uri: b.url, show: "True", shadows: "enabled", scale: b.scale } }) }
function add_glb_model_2(b) { var a = Cesium.Cartesian3.fromDegrees(b.xyz[0], b.xyz[1], b.xyz[2]), c = Cesium.Math.toRadians(b.rotate[0]); c = new Cesium.HeadingPitchRoll(c, b.rotate[1], b.rotate[2]); c = Cesium.Transforms.headingPitchRollQuaternion(a, c); return viewer.entities.add({ name: b.name, description: b.description, position: a, orientation: c, model: { uri: b.url, show: "True", shadows: "enabled", scale: b.scale } }) }
function getLocationFromJSON(b, a, c) { $.getJSON(a, function (a) { for (var e = 0; e < a.features.length; e++) { var d = a.features[e].geometry.coordinates; dictdata = { name: b, url: c, xyz: [d[0], d[1], 0], rotate: a.features[e].properties.rotate, scale: a.features[e].properties.scale, description: "" }; add_glb_model(dictdata); dictdata = {} } }) }
function getTree(b, a, c) { $.getJSON(a, function (a) { for (var e = 0; e < a.features.length; e++) { var d = a.features[e].geometry.coordinates; d = Cesium.Cartesian3.fromDegrees(d[0], d[1], 0); var f = Cesium.Math.toRadians(0); f = new Cesium.HeadingPitchRoll(f, 0, 0); f = Cesium.Transforms.headingPitchRollQuaternion(d, f); viewer.entities.add({ name: b, description: "", position: d, orientation: f, model: { uri: c, show: "True", shadows: "enabled", scale: .01 } }) } }) }
function computeCircle(b) { for (var a = [], c = 0; 360 > c; c++) { var g = Cesium.Math.toRadians(c); a.push(new Cesium.Cartesian2(b * Math.cos(g), b * Math.sin(g))) } return a } function DegreesArray(b) { for (var a = [], c = 0; c < b.length; c++)a.push(b[c][0], b[c][1]); return a }
function getPipe(b, a) { $.getJSON(a, function (b) { for (var a = 0; a < b.features.length; a++) { for (var c = [], d = b.features[a].geometry.coordinates, f = b.features[a].properties.elevation, h = 0; h < d.length; h++)c.push(parseFloat(d[h][0]).toFixed(6), parseFloat(d[h][1]).toFixed(6)); viewer.entities.add({ name: f, polylineVolume: { positions: Cesium.Cartesian3.fromDegreesArray(c), shape: computeCircle(.3), material: Cesium.Color.DARKGRAY } }) } }) }
function getMultiOBJ(b, a, c) { $.getJSON(a, function (a) { for (var e = 0; e < a.features.length; e++) { var d = a.features[e].geometry.coordinates, f = a.features[e].properties; d = Cesium.Cartesian3.fromDegrees(d[0], d[1], 0); f = Cesium.Math.toRadians(f.heading); f = new Cesium.HeadingPitchRoll(f, 0, 0); f = Cesium.Transforms.headingPitchRollQuaternion(d, f); viewer.entities.add({ name: b, description: "<b>" + b + "</b>", position: d, orientation: f, model: { uri: c, show: "True", shadows: "enabled", scale: 1 } }) } }) }
function getMan(b, a, c) { $.getJSON(a, function (a) { for (var e = 0; e < a.features.length; e++) { var d = a.features[e].geometry.coordinates, f = a.features[e].properties; d = Cesium.Cartesian3.fromDegrees(d[0], d[1], 0); f = Cesium.Math.toRadians(f.rotate); f = new Cesium.HeadingPitchRoll(f, 0, 0); f = Cesium.Transforms.headingPitchRollQuaternion(d, f); viewer.entities.add({ name: b, description: "", position: d, orientation: f, model: { uri: c, show: "True", shadows: "enabled", scale: 3 } }) } }) }
function getCarTrackCZML() { new Cesium.SampledPositionProperty; Cesium.Cartesian3.fromDegrees(100.524901, 13.747053, 0); Cesium.Cartesian3.fromDegrees(100.524346, 13.743728, 0) }
function add_objtile_model(b) {
    var a = scene.primitives.add(new Cesium.Cesium3DTileset({ url: b.dir_tilejson, skipLevelOfDetail: !0, baseScreenSpaceError: 1024, skipScreenSpaceErrorFactor: 16, skipLevels: 1, immediatelyLoadDesiredLevelOfDetail: !1, loadSiblings: !1, cullWithChildrenBounds: !0 })); a.readyPromise.then(function () {
        var c = Cesium.Cartesian3.fromDegrees(b.ori_x, b.ori_y, b.ori_z); c = Cesium.Transforms.eastNorthUpToFixedFrame(c); var g = Cesium.Matrix4.fromRotationTranslation(Cesium.Matrix3.fromRotationZ(Cesium.Math.toRadians(b.heading)));
        Cesium.Matrix4.multiply(c, g, c); a._root.transform = c
    }); a.name = b.bld_name; listTileLayers.push(b.gid); return listTileLayers
} function ReplaceBLD(b) { 150 > b && viewer.dataSources.remove(bld_dataSource) } function processData(b) { b = b.split(/\r\n|\n/)[0].split(","); for (var a = [], c = b.splice(0, 5); 0 < b.length;) { for (var g = [], e = 0; 5 > e; e++)g.push(c[e] + ":" + b.shift()); a.push(g) } console.log(a) };